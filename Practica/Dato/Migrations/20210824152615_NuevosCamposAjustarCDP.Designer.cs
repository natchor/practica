// <auto-generated />
using System;
using Dato;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dato.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210824152615_NuevosCamposAjustarCDP")]
    partial class NuevosCamposAjustarCDP
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.HasSequence<int>("Solicitud_CDP", "dbo");

            modelBuilder.HasSequence<int>("Solicitud_CorrelativoAnual", "dbo");

            modelBuilder.Entity("Dato.Entities.Aprobacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AprobacionConfigId")
                        .HasColumnType("int");

                    b.Property<bool>("EstaAprobado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaAprobacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("int");

                    b.Property<int>("UserAprobadorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AprobacionConfigId");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("UserAprobadorId");

                    b.ToTable("Aprobacion");
                });

            modelBuilder.Entity("Dato.Entities.AprobacionConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AConfigRequeridaId")
                        .HasColumnType("int");

                    b.Property<bool>("EsParaTodoConceptoPre")
                        .HasColumnType("bit");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("bit");

                    b.Property<long?>("MontoUTMDesde")
                        .HasColumnType("bigint");

                    b.Property<long?>("MontoUTMHasta")
                        .HasColumnType("bigint");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Quien")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiereAsignacion")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AConfigRequeridaId");

                    b.ToTable("AprobacionConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EsParaTodoConceptoPre = true,
                            EstaActivo = true,
                            MontoUTMDesde = -1L,
                            MontoUTMHasta = -1L,
                            Nombre = "Obtencion del CDP Analista",
                            Orden = 2,
                            Quien = "select Id from reqCompra..[User] where SectorId = 231 and CargoId = 2",
                            RequiereAsignacion = false
                        },
                        new
                        {
                            Id = 3,
                            EsParaTodoConceptoPre = true,
                            EstaActivo = true,
                            MontoUTMDesde = -1L,
                            MontoUTMHasta = -1L,
                            Nombre = "Jefe Directo",
                            Orden = 4,
                            Quien = "select JefeDirectoId AS 'Id' from reqCompra..[User] where Id = @UserId -- Autorizador nivel 1",
                            RequiereAsignacion = false
                        },
                        new
                        {
                            Id = 4,
                            AConfigRequeridaId = 10,
                            EsParaTodoConceptoPre = true,
                            EstaActivo = true,
                            MontoUTMDesde = 30L,
                            MontoUTMHasta = 350L,
                            Nombre = "Jefe DAF",
                            Orden = 6,
                            Quien = "select Id from reqCompra..[User] where SectorId = 228 and CargoId = 14 --JEFE DAF",
                            RequiereAsignacion = false
                        },
                        new
                        {
                            Id = 6,
                            AConfigRequeridaId = 4,
                            EsParaTodoConceptoPre = true,
                            EstaActivo = true,
                            MontoUTMDesde = 350L,
                            MontoUTMHasta = -1L,
                            Nombre = "Aprobador Gabinete",
                            Orden = 7,
                            Quien = "select Id from reqCompra..[User] where SectorId in (237, 241) and CargoId in (9, 8) -- ministro y subse",
                            RequiereAsignacion = false
                        },
                        new
                        {
                            Id = 10,
                            EsParaTodoConceptoPre = true,
                            EstaActivo = true,
                            MontoUTMDesde = 0L,
                            MontoUTMHasta = 30L,
                            Nombre = "Aprobador Jefe Administración",
                            Orden = 5,
                            Quien = "select Id from reqCompra..[User] where SectorId = 229 and CargoId = 14 --Pertinencia 2",
                            RequiereAsignacion = false
                        },
                        new
                        {
                            Id = 1012,
                            EsParaTodoConceptoPre = true,
                            EstaActivo = true,
                            Nombre = "Analista de Compra",
                            Orden = 1,
                            RequiereAsignacion = true
                        },
                        new
                        {
                            Id = 1015,
                            EsParaTodoConceptoPre = true,
                            EstaActivo = true,
                            MontoUTMDesde = 193L,
                            MontoUTMHasta = -1L,
                            Nombre = "Obtencion del CDP JEFA/E",
                            Orden = 3,
                            Quien = "select Id from reqCompra..[User] where SectorId = 231 and CargoId = 14  ",
                            RequiereAsignacion = false
                        });
                });

            modelBuilder.Entity("Dato.Entities.Archivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Ext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Archivo");
                });

            modelBuilder.Entity("Dato.Entities.Bitacora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudId");

                    b.HasIndex("UserId");

                    b.ToTable("Bitacora");
                });

            modelBuilder.Entity("Dato.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cargo");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Nombre = "PROFESIONAL"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Tecnico"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Jefe Unidad"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Asistente Administrativo"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "MINISTRA/O"
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Subsecretario"
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Seremi"
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "JEFA/E"
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "ASESOR/A"
                        },
                        new
                        {
                            Id = 16,
                            Nombre = "AUXILIAR "
                        },
                        new
                        {
                            Id = 17,
                            Nombre = "CONDUCTOR/A"
                        });
                });

            modelBuilder.Entity("Dato.Entities.ConceptoPresupuestario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectorPertinenciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectorPertinenciaId");

                    b.ToTable("ConceptoPresupuestario");
                });

            modelBuilder.Entity("Dato.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermiteGenerarOC")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Estado");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Creada",
                            PermiteGenerarOC = false
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "En proceso de aprobacion",
                            PermiteGenerarOC = false
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Aprobada",
                            PermiteGenerarOC = true
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Rechazada en aprobación",
                            PermiteGenerarOC = false
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Asignada",
                            PermiteGenerarOC = false
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Generando OC",
                            PermiteGenerarOC = true
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Finalizada",
                            PermiteGenerarOC = false
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "Anulada",
                            PermiteGenerarOC = false
                        });
                });

            modelBuilder.Entity("Dato.Entities.FeriadoChile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FeriadoChile");
                });

            modelBuilder.Entity("Dato.Entities.ModalidadCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ModalidadCompra");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Anual"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Multianual"
                        });
                });

            modelBuilder.Entity("Dato.Entities.OrdenCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActividadProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CantidadEvaluacion")
                        .HasColumnType("int");

                    b.Property<string>("CargoContacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CargoContactoProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cargos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoCategoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoEstadoProveedor")
                        .HasColumnType("int");

                    b.Property<string>("CodigoOC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoProducto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoSucursal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodigoTipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComunaProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descuentos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DireccionProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EspecificacionComprador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EspecificacionProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaAceptacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCancelacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaUltimaModificacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Financiamiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FonoContacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FonoContactoProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormaPago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Impuestos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListadoCorrelativo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailContacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailContactoProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Moneda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreContacto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreContactoProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreSucursal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaisProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PorcentajeIva")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioNeto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Producto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromedioCalificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProveedorCodigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionProveedor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RutSucursal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TieneItems")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoMoneda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalCargos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDescuentos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalImpuestos")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalNeto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unidad")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrdenCompra");
                });

            modelBuilder.Entity("Dato.Entities.ProgramaPresupuestario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProgramaPresupuestario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Programa 01"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Programa 03"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Programa 04"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Programa 05"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "FONDOS NO AFECTOS A LEY (EXTRAPRESUPUESTARIOS)"
                        });
                });

            modelBuilder.Entity("Dato.Entities.PropertiesEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Asunto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mensaje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertiesEmail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Asunto = "Notifica Aprobación en Solicitud de Compra N° $Id",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, la Solicitud de compra N° $Id, con nombre \"$NombreCompra\" fue aprobada por $Usuario  <br/>",
                            Nombre = "APROBACION"
                        },
                        new
                        {
                            Id = 2,
                            Asunto = "Notifica Creación en Solicitud de Compra N° $Id",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, se ha creado la Solicitud de compra N° $Id, con nombre \"$NombreCompra\" por $Usuario <br/>",
                            Nombre = "CREACION"
                        },
                        new
                        {
                            Id = 3,
                            Asunto = "Solicitud de Compra N° $Id asignada",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, se le ha asignado la Solicitud de compra N° $Id, con nombre \"$NombreCompra\" <br/>",
                            Nombre = "ASIGNACION"
                        },
                        new
                        {
                            Id = 4,
                            Asunto = "Notifica Creación de CDP en Solicitud de Compra N° $Id",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, se ha creado CDP correspondiente a la Solicitud de compra N° $Id, con nombre \"$NombreCompra\" por $Usuario <br/>",
                            Nombre = "CDP"
                        },
                        new
                        {
                            Id = 5,
                            Asunto = "Solicitud de Compra N° $Id requiere de su aprobación",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, la Solicitud de compra N° $Id, con nombre \"$NombreCompra\" requiere de su aprobación<br/>",
                            Nombre = "SIGUIENTE"
                        },
                        new
                        {
                            Id = 6,
                            Asunto = "Solicitud de Compra N° $Id rechazada",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, la Solicitud de compra N° $Id, con nombre \"$NombreCompra\" fue rechazada por $Usuario <br/>",
                            Nombre = "RECHAZA"
                        },
                        new
                        {
                            Id = 7,
                            Asunto = "Solicitud de Compra N° $Id anulada",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, la Solicitud de compra N° $Id, con nombre \"$NombreCompra\" fue anulada por $Usuario <br/>",
                            Nombre = "ANULA"
                        },
                        new
                        {
                            Id = 8,
                            Asunto = "Notifica proceso de Solicitud de Compra N° $Id Finalizado",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, ha finalizado la Solicitud de compra N° $Id, con nombre \"$NombreCompra\".<br>La diferencia de montos para los años es el siguietne: <br>$foreachMontos<br/>",
                            Nombre = "FINALIZA"
                        },
                        new
                        {
                            Id = 9,
                            Asunto = "Notifica Modificación en Solicitud de Compra N° $Id",
                            From = "req-compra@minenergia.cl",
                            FromNombre = "ReqCompra",
                            Mensaje = "Por este medio se comunica que, con fecha $fecha, se ha modificado la Solicitud de compra N° $Id, con nombre \"$NombreCompra\" por $Usuario <br/>",
                            Nombre = "MODIFICADA"
                        });
                });

            modelBuilder.Entity("Dato.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AdmMantenedores")
                        .HasColumnType("bit");

                    b.Property<bool>("ApruebaCDP")
                        .HasColumnType("bit");

                    b.Property<bool>("FinalizaSolicitud")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresaOC")
                        .HasColumnType("bit");

                    b.Property<bool>("IngresaSolicitud")
                        .HasColumnType("bit");

                    b.Property<bool>("ModificaMatrizAprobacion")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PuedeAsignar")
                        .HasColumnType("bit");

                    b.Property<bool>("VeGestionSolicitudes")
                        .HasColumnType("bit");

                    b.Property<bool>("VerPorFinalizar")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdmMantenedores = true,
                            ApruebaCDP = true,
                            FinalizaSolicitud = true,
                            IngresaOC = true,
                            IngresaSolicitud = true,
                            ModificaMatrizAprobacion = true,
                            Nombre = "Administrador",
                            PuedeAsignar = true,
                            VeGestionSolicitudes = true,
                            VerPorFinalizar = false
                        },
                        new
                        {
                            Id = 2,
                            AdmMantenedores = false,
                            ApruebaCDP = true,
                            FinalizaSolicitud = false,
                            IngresaOC = false,
                            IngresaSolicitud = true,
                            ModificaMatrizAprobacion = false,
                            Nombre = "Analista de presupuesto",
                            PuedeAsignar = false,
                            VeGestionSolicitudes = true,
                            VerPorFinalizar = true
                        },
                        new
                        {
                            Id = 3,
                            AdmMantenedores = false,
                            ApruebaCDP = true,
                            FinalizaSolicitud = false,
                            IngresaOC = false,
                            IngresaSolicitud = true,
                            ModificaMatrizAprobacion = false,
                            Nombre = "Jefe Presupuesto",
                            PuedeAsignar = false,
                            VeGestionSolicitudes = true,
                            VerPorFinalizar = true
                        },
                        new
                        {
                            Id = 4,
                            AdmMantenedores = false,
                            ApruebaCDP = false,
                            FinalizaSolicitud = true,
                            IngresaOC = true,
                            IngresaSolicitud = true,
                            ModificaMatrizAprobacion = true,
                            Nombre = "Asignador de Solicitud",
                            PuedeAsignar = true,
                            VeGestionSolicitudes = true,
                            VerPorFinalizar = true
                        },
                        new
                        {
                            Id = 5,
                            AdmMantenedores = false,
                            ApruebaCDP = false,
                            FinalizaSolicitud = true,
                            IngresaOC = true,
                            IngresaSolicitud = true,
                            ModificaMatrizAprobacion = false,
                            Nombre = "Analista de compras",
                            PuedeAsignar = true,
                            VeGestionSolicitudes = true,
                            VerPorFinalizar = true
                        },
                        new
                        {
                            Id = 6,
                            AdmMantenedores = false,
                            ApruebaCDP = false,
                            FinalizaSolicitud = false,
                            IngresaOC = false,
                            IngresaSolicitud = true,
                            ModificaMatrizAprobacion = false,
                            Nombre = "Funcionario solicitante",
                            PuedeAsignar = false,
                            VeGestionSolicitudes = true,
                            VerPorFinalizar = false
                        });
                });

            modelBuilder.Entity("Dato.Entities.SectProgPre", b =>
                {
                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramaPresupuestarioId")
                        .HasColumnType("int");

                    b.Property<int>("UserEncargadoId")
                        .HasColumnType("int");

                    b.HasKey("SectorId", "ProgramaPresupuestarioId", "UserEncargadoId");

                    b.HasIndex("ProgramaPresupuestarioId");

                    b.ToTable("SectProgPre");
                });

            modelBuilder.Entity("Dato.Entities.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectorPadre")
                        .HasColumnType("int");

                    b.Property<bool>("TienePresupuesto")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("Dato.Entities.Solicitud", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AnalistaPresupuestoId")
                        .HasColumnType("int");

                    b.Property<int?>("AnalistaProcesoId")
                        .HasColumnType("int");

                    b.Property<int>("AprobadorActualId")
                        .HasColumnType("int");

                    b.Property<string>("CDPNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConceptoPresupuestarioId")
                        .HasColumnType("int");

                    b.Property<int?>("ContraparteTecnicaId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("FaseCDP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaDerivacionAnalista")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaOrdenCompra")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaValidacionCDP")
                        .HasColumnType("datetime2");

                    b.Property<string>("FolioRequerimientoSIGFE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoliocompromisoSIGFE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FuncionarioValidacionCDPId")
                        .HasColumnType("int");

                    b.Property<string>("IniciativaVigente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IniciativaVigenteId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModalidadCompraId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MontoAnhoActual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoAprox")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoCLP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MontoMultiAnual")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoUTM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreCompra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroSolicitud")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjetivoJustificacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservacionGeneral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrdenCompra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramaPresupuestarioId")
                        .HasColumnType("int");

                    b.Property<string>("ProveedorNombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProveedorRut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SolicitanteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoCompraId")
                        .HasColumnType("int");

                    b.Property<int>("TipoMonedaId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadDemandanteId")
                        .HasColumnType("int");

                    b.Property<bool>("ValidacionCDP")
                        .HasColumnType("bit");

                    b.Property<decimal>("ValorDivisa")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AnalistaPresupuestoId");

                    b.HasIndex("AnalistaProcesoId");

                    b.HasIndex("AprobadorActualId");

                    b.HasIndex("ConceptoPresupuestarioId");

                    b.HasIndex("ContraparteTecnicaId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("FuncionarioValidacionCDPId");

                    b.HasIndex("ModalidadCompraId");

                    b.HasIndex("SolicitanteId");

                    b.HasIndex("TipoCompraId");

                    b.HasIndex("TipoMonedaId");

                    b.HasIndex("UnidadDemandanteId");

                    b.ToTable("Solicitud");
                });

            modelBuilder.Entity("Dato.Entities.SolicitudDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<bool>("EsAjuste")
                        .HasColumnType("bit");

                    b.Property<decimal>("MontoFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoMonedaSel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoMonedaSelFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoPresupuestado")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SolicitudId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolicitudId");

                    b.ToTable("SolicitudDetalle");
                });

            modelBuilder.Entity("Dato.Entities.StoredProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Parametros")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StoredProcedure");
                });

            modelBuilder.Entity("Dato.Entities.TipoCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoCompra");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Convenio Marco"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Gran compra"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Compra ágil"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Trato directo"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Licitación Pública"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Licitación privada"
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Gastos de representación"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Compra Coordinada"
                        });
                });

            modelBuilder.Entity("Dato.Entities.TipoMoneda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Estado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaReferencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaSolicitud")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlCMF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TipoMoneda");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "UTM",
                            Estado = true,
                            Nombre = "UTM",
                            UrlCMF = "https://api.sbif.cl/api-sbifv3/recursos_api/utm?apikey={0}&formato=xml",
                            Valor = 52005.00m
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "UF",
                            Estado = true,
                            Nombre = "UF",
                            UrlCMF = "https://api.sbif.cl/api-sbifv3/recursos_api/uf?apikey={0}&formato=xml",
                            Valor = 29624.70m
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "USD",
                            Estado = true,
                            Nombre = "Dolar",
                            UrlCMF = "https://api.sbif.cl/api-sbifv3/recursos_api/dolar?apikey={0}&formato=xml",
                            Valor = 720.44m
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "EUR",
                            Estado = true,
                            Nombre = "Euro",
                            UrlCMF = "https://api.sbif.cl/api-sbifv3/recursos_api/euro?apikey={0}&formato=xml",
                            Valor = 879.66m
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "CLP",
                            Estado = false,
                            Nombre = "Peso Chileno",
                            Valor = 1.00m
                        });
                });

            modelBuilder.Entity("Dato.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CargoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JefeDirectoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("JefeDirectoId");

                    b.HasIndex("SectorId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Dato.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Dato.Entities.Aprobacion", b =>
                {
                    b.HasOne("Dato.Entities.AprobacionConfig", "AprobacionConfig")
                        .WithMany("Aprobaciones")
                        .HasForeignKey("AprobacionConfigId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dato.Entities.Solicitud", "Solicitud")
                        .WithMany("Aprobaciones")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.User", "UserAprobador")
                        .WithMany()
                        .HasForeignKey("UserAprobadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AprobacionConfig");

                    b.Navigation("Solicitud");

                    b.Navigation("UserAprobador");
                });

            modelBuilder.Entity("Dato.Entities.AprobacionConfig", b =>
                {
                    b.HasOne("Dato.Entities.AprobacionConfig", "AConfigRequerida")
                        .WithMany()
                        .HasForeignKey("AConfigRequeridaId");

                    b.Navigation("AConfigRequerida");
                });

            modelBuilder.Entity("Dato.Entities.Archivo", b =>
                {
                    b.HasOne("Dato.Entities.Solicitud", "Solicitud")
                        .WithMany("Archivos")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.User", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Solicitud");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dato.Entities.Bitacora", b =>
                {
                    b.HasOne("Dato.Entities.Solicitud", "Solicitud")
                        .WithMany()
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitud");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dato.Entities.ConceptoPresupuestario", b =>
                {
                    b.HasOne("Dato.Entities.Sector", "SectorPertinencia")
                        .WithMany()
                        .HasForeignKey("SectorPertinenciaId");

                    b.Navigation("SectorPertinencia");
                });

            modelBuilder.Entity("Dato.Entities.SectProgPre", b =>
                {
                    b.HasOne("Dato.Entities.ProgramaPresupuestario", "ProgramaPresupuestario")
                        .WithMany("SectProgPres")
                        .HasForeignKey("ProgramaPresupuestarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.Sector", "Sector")
                        .WithMany("SectProgPres")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramaPresupuestario");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Dato.Entities.Solicitud", b =>
                {
                    b.HasOne("Dato.Entities.User", "AnalistaPresupuesto")
                        .WithMany()
                        .HasForeignKey("AnalistaPresupuestoId");

                    b.HasOne("Dato.Entities.User", "AnalistaProceso")
                        .WithMany()
                        .HasForeignKey("AnalistaProcesoId");

                    b.HasOne("Dato.Entities.AprobacionConfig", "AprobadorActual")
                        .WithMany("Solicitudes")
                        .HasForeignKey("AprobadorActualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dato.Entities.ConceptoPresupuestario", "ConceptoPresupuestario")
                        .WithMany("Solicitudes")
                        .HasForeignKey("ConceptoPresupuestarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.User", "ContraparteTecnica")
                        .WithMany()
                        .HasForeignKey("ContraparteTecnicaId");

                    b.HasOne("Dato.Entities.Estado", "Estado")
                        .WithMany("Solicitudes")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dato.Entities.User", "FuncionarioValidacionCDP")
                        .WithMany()
                        .HasForeignKey("FuncionarioValidacionCDPId");

                    b.HasOne("Dato.Entities.ModalidadCompra", "ModalidadCompra")
                        .WithMany("Solicitudes")
                        .HasForeignKey("ModalidadCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.User", "Solicitante")
                        .WithMany()
                        .HasForeignKey("SolicitanteId");

                    b.HasOne("Dato.Entities.TipoCompra", "TipoCompra")
                        .WithMany("Solicitudes")
                        .HasForeignKey("TipoCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.TipoMoneda", "TipoMoneda")
                        .WithMany("Solicitudes")
                        .HasForeignKey("TipoMonedaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.Sector", "UnidadDemandante")
                        .WithMany("SolicitudesUnidadesDemandantes")
                        .HasForeignKey("UnidadDemandanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnalistaPresupuesto");

                    b.Navigation("AnalistaProceso");

                    b.Navigation("AprobadorActual");

                    b.Navigation("ConceptoPresupuestario");

                    b.Navigation("ContraparteTecnica");

                    b.Navigation("Estado");

                    b.Navigation("FuncionarioValidacionCDP");

                    b.Navigation("ModalidadCompra");

                    b.Navigation("Solicitante");

                    b.Navigation("TipoCompra");

                    b.Navigation("TipoMoneda");

                    b.Navigation("UnidadDemandante");
                });

            modelBuilder.Entity("Dato.Entities.SolicitudDetalle", b =>
                {
                    b.HasOne("Dato.Entities.Solicitud", "Solicitud")
                        .WithMany("SolicitudDetalle")
                        .HasForeignKey("SolicitudId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Solicitud");
                });

            modelBuilder.Entity("Dato.Entities.User", b =>
                {
                    b.HasOne("Dato.Entities.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId");

                    b.HasOne("Dato.Entities.User", "JefeDirecto")
                        .WithMany("Users")
                        .HasForeignKey("JefeDirectoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dato.Entities.Sector", "Sector")
                        .WithMany("Users")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("JefeDirecto");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Dato.Entities.UserRole", b =>
                {
                    b.HasOne("Dato.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dato.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dato.Entities.AprobacionConfig", b =>
                {
                    b.Navigation("Aprobaciones");

                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Dato.Entities.ConceptoPresupuestario", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Dato.Entities.Estado", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Dato.Entities.ModalidadCompra", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Dato.Entities.ProgramaPresupuestario", b =>
                {
                    b.Navigation("SectProgPres");
                });

            modelBuilder.Entity("Dato.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Dato.Entities.Sector", b =>
                {
                    b.Navigation("SectProgPres");

                    b.Navigation("SolicitudesUnidadesDemandantes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Dato.Entities.Solicitud", b =>
                {
                    b.Navigation("Aprobaciones");

                    b.Navigation("Archivos");

                    b.Navigation("SolicitudDetalle");
                });

            modelBuilder.Entity("Dato.Entities.TipoCompra", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Dato.Entities.TipoMoneda", b =>
                {
                    b.Navigation("Solicitudes");
                });

            modelBuilder.Entity("Dato.Entities.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
